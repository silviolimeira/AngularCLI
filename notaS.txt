
Test Driving the Angular CLI

Installing the Angular CLI
$ npm install -g @angular/cli

Verifying Your Installation
$ ng version

Verify one package without dependencies
$ npm list -g @angular/cli --depth=0

$ npm new my-dream-app

$ ng serve

$ ng doc component

$ ng --help

$ ng lint 

$ ng test 

$ ng e2e 

$ ng build  // put dist to default folder

$ ng serve --prod

$ git clone https://github.com/johnpapa/angular-event-view-cli

Angular CLI Setup and Verification
Angular CLI - Angular CLI Instalation

Generating and Exploring a New app and skip npm install
$ ng new ngtest --skip-install

Install the Angular Essentials Extension package
http://jpapa.me/angularessentials

angular essentials

Refer to the Angular CLI websites
- https://cli.angular.io 
- https://angular.io 
- https://github.com/angular/angular-cli 

Generating a New Application
$ ng new my-app  // Generate a new in /my-app

$ ng new my-ap --dry-run  // Don't write the files, but report them

$ ng new my-app --skip-install // Generate without running npm install

Getting help
Add the --help flag
Reports the many options and their defaults

$ ng new --help

Generating And Customizing a New App 
====================================

$ ng new my-app --dry-run  
$ ng new my-app -d 

$ ng new my-app --help

$ ng new my-app --skip-install

Generating a New Angular Application
Angular CLI JSON File 

$ ng new my-app2 --prefix acme --skip-install
Todo: Verify the angular.json for the "prefix": "acme",

and the app/app.component the selector at decorator @Compoent
  selector: 'acme-root',

Skip Tests
$ ng new my-app3 --skip-tests --prefix acme --skip-install

TODO: Verify different flags
$ ng new --help

Add type style flag example:
$ ng new my-app4 --skip-tests --prefix acme --skip-install --style scss

Add routing flag example:
$ ng new my-app5 --routing --skip-tests --prefix acme --skip-install --style scss

Using the short flags example:
$ ng new --help

$ ng new my-app6 -dstS --skip-install --routing --style scss

$ ng new my-app6 -stS --skip-install --routing --style scss

Common App Generation flags

Many flags can be combined 
Ideal for settings that should exist throughout the app
Some flags change the configuration in angular.json

Tip

$ ng new my-app --routing     // Add routing
                --prefix ma   // Set your prefix
                --style scss  // Define your styles
                --dry-run     // Verify the file names (util to verify command)

$ ng new my-app7 --routing --prefix sicemal --style scss

Try, test the app

$ npm start 
 
and

$ ng serve --help

$ ng serve -o


Configurating the Angular CLI
-----------------------------

Setting the Angular CLI's configuration
Use ng config 
Indicate the json path
The --global (or -g) flag sets your global angular.json file

$ ng config schematics.@schematics/angular :component.styleext scss

Linting 
-------

$ ng lint my-app --help  // Show the help for linting a project

$ ng lint my-app --format stylish // Lint and format the output

$ ng lint my-app --fix // Lint and attempt to fix all problems

TODO: Try

$ ng lint my-app7

$ ng lint my-app7 --format stylish

$ ng lint my-app7 --fix


Generating Code from Blueprints
-------------------------------
Compmplents Blueprints and Options 

The generate command will generate code from a Blueprint
Syntax: ng generate <blueprint> <options>
Use the --dry-run option to practice


$ ng generate component customer    --> customer.component.ts 

$ ng generate service customer-data --> customer-data.ts 

$ ng generate class customer-model  --> customer-model.ts


  Aliases as Shortcuts
  --------------------

  $ ng generate component customer

  $ ng g c customer



  Common Component Blueprint Options
  ----------------------------------

  Options                 Alias   Description
  --flat                          Should a folder be created?
  --inline-template       -t      Will the template be in the .ts file?
  --inline-style          -s      Will the style be in the .ts file?
  --spec                          Generate a spec?
  --view-encapsulation    -v      View encapsulation strategy
  --change-detection      -c      Change detection strategy
  --dry-run               -d      Report the files, don't write them

  Common Ways to Generate Components
  ==================================

  $ ng generate component pet 

  $ ng generate component pet --inline-template --inlite-style

  $ ng g c pet

  $ ng g pet -t -s 


  Common Used Commands
  ====================

  $ ng g c pet --flat             // Don't create a pet folder
               --inline-template  // Put the template in the .ts file
               --inline-style     // Put styles in the .ts file
               --prefix my        // Prefix the component with my-


Generating Components 
=====================

$ ng new angular-hello

$ ng serve -o

$ ng g c customer -d

$ ng g c orders --view-encapsulation Emulated -d 

$ ng g c orders -v Emulated -c OnPush



Generating Directives
=====================

$ ng g d search-box -d

$ ng g d search-box2 --flat false -d  // generate directive with respective folder
                                      // -d dry-run - clear the flag to efective creating


Generating Services
===================

$ ng g service sales-data -d 

$ ng g s sales-data



Generating Classes, Interfaces and Enums
========================================

$ mkdir models

Generate class
$ ng generate class models/customer -d
$ mg g cl ...

Generate Interfaces
$ ng generate interface models/person -d
$ ng g i ...

Generate Enums
$ ng generate enums/gender -d
$ ng g e ...


Generating Pipes
================

$ ng generate pipe shared/init-caps -d 
$ ng g p shared/init-caps ...

$ ng g p shared/init-caps -m app.module -d 


Generating NgModules
====================

$ ng generate module login -m app.module -d
$ ng g m login -m app.module 



Generating Route Features: The NgModule Blueprint with Routing 
==============================================================

NgModules and Routing
Generate a new NgModule with ng g module <name> <options>
Define a module and a separate rouring module with --routing

$ ng g module admin // Generate admin.module.ts

$ ng g m sales --routing // sales.module.ts & sales-routing.module.ts



Generating a New Routing App
============================

$ ng new angular-routing --routing

$ ng serve -o 

$ ng g c dashboard
$ ng g c customer

snippet
nav>ul>li*2>a[[routerLink]]
result:
  <nav>
    <ul>
      <li><a href="" [routerLink]="['/dashboard']">Dashboard</a></li>
      <li><a href="" [routerLink]="['/customer']">Customer</a></li>
    </ul>
  </nav>


Adding Routing Features with the Angular CLI
============================================

$ ng g new sales --routing  // New app, module, & routing module

$ ng g m admin --routing  // New module plus a routing module

$ ng g c admin/users  // New component in the admin module


Generating a Guard
==================

Generating an App with Routing Features

Generate a new NgModule with ng new <app-name> <options>

Define a separate routing module for the new app with --routing


$ ng new sales --routing // app.module.ts & app-routing.module.ts



Building and Serving
====================

Building Angular
----------------

$ ng build  // ng build <options>

Development Builds

Ideal for Development

Output to /dist/[your app] folder, by default (see angular.json)


Exploring the Build Bundles
---------------------------

File          Description

runtime.js    WebPack runtime
main.js       App code
polyfill.js   Platform polyfills (for different browsers)
styles.s      Styles
vendor.js     Angular and other vendor files


Exploring the Source in the Output
----------------------------------

$ npm install webpack-bundle-analyser --save-dev 

$ ng build -stats-json // https://github.com/webpack-contrib/webpack-bundle-analyser

$ npx webpack-bundle-analyser dist/my-app/stats.json


$ npm install source-map-explorer --save-dev

$ ng build    // https://github.com/danvk/source-map-explorer/

$ npx source-map-explorer dist/my-app/main.js


Exploring a Development Build and its Bundles
---------------------------------------------

ng build

vefify dist folder in the angular.json config
Output to /dist/[your app] folder, by default (see angular.json)


$ npm install webpack-bundle-analyser --save-dev

$ ng build --stats-json

add script stats to package.json

"scripts": {
  "stats": "npx webpack-bundle-analyser dist/angular-routing/stats.json"
}

$ npm run stats


Comparing Dev and Prod Build Targets
------------------------------------

                ng build                                  ng build --prod

Environment     environment.ts                            environment.prod.ts
Cache-busting   only images referenced in class           all build files
Source maps     generated                                 not generated
Extracted CSS   global CSS output to .js                  yes, to css files(s)
Uglification    no                                        yes
Tree-Shaking    no                                        yes
AOT             no                                        yes
Bundling        yes                                       yes


Common ng build Options
-----------------------

Options       Alias   Description
--source-map          Generate a source map
--aot                 Ahead of Time compilation 
--watch       -w      Watch and rebuild
--prod        -e      Shortcut for prod env and target


Production Builds
-----------------

$ ng build --aot --stats-json

$ npm run stats

$ ng b --prod --stats-json

$ npm run stats  // tool for visualization

















